'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.CodeDom.Compiler
Imports System.Data.Entity.Core.Metadata.Edm
Imports System.Data.Entity.Infrastructure.MappingViews

<Assembly: DbMappingViewCacheTypeAttribute(
    GetType(EmployeeDataAccess.DataEntities),
    GetType(Edm_EntityMappingGeneratedViews.ViewsForBaseEntitySets40892227753937d5e7fb0d7e871f5ba815b21151dc86b705438a3a6cbf0e1a90))>

Namespace Edm_EntityMappingGeneratedViews

    ''' <summary>
    ''' Implements a mapping view cache.
    ''' </summary>
    <GeneratedCode("Entity Framework Power Tools", "0.9.0.0")>
    Friend NotInheritable Class ViewsForBaseEntitySets40892227753937d5e7fb0d7e871f5ba815b21151dc86b705438a3a6cbf0e1a90
        Inherits DbMappingViewCache

        ''' <summary>
        ''' Gets a hash value computed over the mapping closure.
        ''' </summary>
        Public Overrides ReadOnly Property MappingHashValue As String
            Get
                Return "40892227753937d5e7fb0d7e871f5ba815b21151dc86b705438a3a6cbf0e1a90"
            End Get
        End Property

        ''' <summary>
        ''' Gets a view corresponding to the specified extent.
        ''' </summary>
        ''' <param name="extent">The extent.</param>
        ''' <returns>The mapping view, or null if the extent is not associated with a mapping view.</returns>
        Public Overrides Function GetView(extent As EntitySetBase) As DbMappingView
            If extent Is Nothing Then
                Throw New ArgumentNullException("extent")
            End If

            Dim extentName = extent.EntityContainer.Name & "." & extent.Name

            If extentName = "DbModelStoreContainer.Clients" Then
                Return GetView0()
            End If

            If extentName = "DbModelStoreContainer.Contacts" Then
                Return GetView1()
            End If

            If extentName = "DataEntities.Clients" Then
                Return GetView2()
            End If

            If extentName = "DataEntities.Contacts" Then
                Return GetView3()
            End If

            If extentName = "DbModelStoreContainer.Employee" Then
                Return GetView4()
            End If

            If extentName = "DataEntities.Employees" Then
                Return GetView5()
            End If

            Return Nothing
        End Function

        ''' <summary>
        ''' Gets the view for DbModelStoreContainer.Clients.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView0() As DbMappingView
            Return New DbMappingView(
                "" & vbCrLf &
                "    SELECT VALUE -- Constructing Clients" & vbCrLf &
                "        [DbModel.Store.Clients](T1.Clients_ID, T1.Clients_RegistrationID, T1.Clients_Password)" & vbCrLf &
                "    FROM (" & vbCrLf &
                "        SELECT " & vbCrLf &
                "            T.ID AS Clients_ID, " & vbCrLf &
                "            T.RegistrationID AS Clients_RegistrationID, " & vbCrLf &
                "            T.Password AS Clients_Password, " & vbCrLf &
                "            True AS _from0" & vbCrLf &
                "        FROM DataEntities.Clients AS T" & vbCrLf &
                "    ) AS T1")
        End Function

        ''' <summary>
        ''' Gets the view for DbModelStoreContainer.Contacts.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView1() As DbMappingView
            Return New DbMappingView(
                "" & vbCrLf &
                "    SELECT VALUE -- Constructing Contacts" & vbCrLf &
                "        [DbModel.Store.Contacts](T1.Contacts_ContactID, T1.Contacts_ClientID, T1.Contacts_FirstName, T1.Contacts_LastName, T1.Contacts_EmailId, T1.Contacts_Phoneno, T1.Contacts_Age)" & vbCrLf &
                "    FROM (" & vbCrLf &
                "        SELECT " & vbCrLf &
                "            T.ContactID AS Contacts_ContactID, " & vbCrLf &
                "            T.ClientID AS Contacts_ClientID, " & vbCrLf &
                "            T.FirstName AS Contacts_FirstName, " & vbCrLf &
                "            T.LastName AS Contacts_LastName, " & vbCrLf &
                "            T.EmailId AS Contacts_EmailId, " & vbCrLf &
                "            T.Phoneno AS Contacts_Phoneno, " & vbCrLf &
                "            T.Age AS Contacts_Age, " & vbCrLf &
                "            True AS _from0" & vbCrLf &
                "        FROM DataEntities.Contacts AS T" & vbCrLf &
                "    ) AS T1")
        End Function

        ''' <summary>
        ''' Gets the view for DataEntities.Clients.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView2() As DbMappingView
            Return New DbMappingView(
                "" & vbCrLf &
                "    SELECT VALUE -- Constructing Clients" & vbCrLf &
                "        [DbModel.Client](T1.Client_ID, T1.Client_RegistrationID, T1.Client_Password)" & vbCrLf &
                "    FROM (" & vbCrLf &
                "        SELECT " & vbCrLf &
                "            T.ID AS Client_ID, " & vbCrLf &
                "            T.RegistrationID AS Client_RegistrationID, " & vbCrLf &
                "            T.Password AS Client_Password, " & vbCrLf &
                "            True AS _from0" & vbCrLf &
                "        FROM DbModelStoreContainer.Clients AS T" & vbCrLf &
                "    ) AS T1")
        End Function

        ''' <summary>
        ''' Gets the view for DataEntities.Contacts.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView3() As DbMappingView
            Return New DbMappingView(
                "" & vbCrLf &
                "    SELECT VALUE -- Constructing Contacts" & vbCrLf &
                "        [DbModel.Contact](T1.Contact_ContactID, T1.Contact_ClientID, T1.Contact_FirstName, T1.Contact_LastName, T1.Contact_EmailId, T1.Contact_Phoneno, T1.Contact_Age)" & vbCrLf &
                "    FROM (" & vbCrLf &
                "        SELECT " & vbCrLf &
                "            T.ContactID AS Contact_ContactID, " & vbCrLf &
                "            T.ClientID AS Contact_ClientID, " & vbCrLf &
                "            T.FirstName AS Contact_FirstName, " & vbCrLf &
                "            T.LastName AS Contact_LastName, " & vbCrLf &
                "            T.EmailId AS Contact_EmailId, " & vbCrLf &
                "            T.Phoneno AS Contact_Phoneno, " & vbCrLf &
                "            T.Age AS Contact_Age, " & vbCrLf &
                "            True AS _from0" & vbCrLf &
                "        FROM DbModelStoreContainer.Contacts AS T" & vbCrLf &
                "    ) AS T1")
        End Function

        ''' <summary>
        ''' Gets the view for DbModelStoreContainer.Employee.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView4() As DbMappingView
            Return New DbMappingView(
                "" & vbCrLf &
                "    SELECT VALUE -- Constructing Employee" & vbCrLf &
                "        [DbModel.Store.Employee](T1.Employee_ID, T1.Employee_FirstName, T1.Employee_LastName, T1.Employee_Gender, T1.Employee_City)" & vbCrLf &
                "    FROM (" & vbCrLf &
                "        SELECT " & vbCrLf &
                "            T.ID AS Employee_ID, " & vbCrLf &
                "            T.FirstName AS Employee_FirstName, " & vbCrLf &
                "            T.LastName AS Employee_LastName, " & vbCrLf &
                "            T.Gender AS Employee_Gender, " & vbCrLf &
                "            T.City AS Employee_City, " & vbCrLf &
                "            True AS _from0" & vbCrLf &
                "        FROM DataEntities.Employees AS T" & vbCrLf &
                "    ) AS T1")
        End Function

        ''' <summary>
        ''' Gets the view for DataEntities.Employees.
        ''' </summary>
        ''' <returns>The mapping view.</returns>
        Private Shared Function GetView5() As DbMappingView
            Return New DbMappingView(
                "" & vbCrLf &
                "    SELECT VALUE -- Constructing Employees" & vbCrLf &
                "        [DbModel.Employee](T1.Employee_ID, T1.Employee_FirstName, T1.Employee_LastName, T1.Employee_Gender, T1.Employee_City)" & vbCrLf &
                "    FROM (" & vbCrLf &
                "        SELECT " & vbCrLf &
                "            T.ID AS Employee_ID, " & vbCrLf &
                "            T.FirstName AS Employee_FirstName, " & vbCrLf &
                "            T.LastName AS Employee_LastName, " & vbCrLf &
                "            T.Gender AS Employee_Gender, " & vbCrLf &
                "            T.City AS Employee_City, " & vbCrLf &
                "            True AS _from0" & vbCrLf &
                "        FROM DbModelStoreContainer.Employee AS T" & vbCrLf &
                "    ) AS T1")
        End Function
    End Class
End Namespace
